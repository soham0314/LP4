// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StudentData {
    
    struct Student {
        uint id;
        string name;
        uint age;
        string course;
    }

    Student[] public students;

    // Mapping to track student IDs to ensure uniqueness
      mapping(uint => bool) public studentExists;

   // Event to log unexpected ETH transfers
     event FallbackTriggered(address sender, uint amount);

    // Event to log ETH received through the receive function
     event EtherReceived(address sender, uint amount);

     fallback() external payable {
        // Emit the FallbackTriggered event with the sender’s address and amount sent
       emit FallbackTriggered(msg.sender, msg.value);
}
    // Receive ETH
    receive() external payable {
       // Emit the EtherReceived event with the sender’s address and amount of Ether sent
       emit EtherReceived(msg.sender, msg.value);
    }

    function addStudent(uint _id, string memory _name, uint _age, string memory _course) public {
        require(!studentExists[_id], "Student ID already exists.");
        students.push(Student(_id, _name, _age, _course));
        studentExists[_id] = true;
    }

    function getStudent(uint index) public view returns (uint, string memory, uint, string memory) {
        require(index < students.length, "Invalid index.");
        Student memory student = students[index];
        return (student.id, student.name, student.age, student.course);
    }

    function getStudentCount() public view returns (uint) {
        return students.length;
    }

}
