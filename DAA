1 -> 

#include <iostream>
#include <chrono>
using namespace std::chrono;
using namespace std;

int fibonacci(int n){
    if(n <=1)  return  n;
    return fibonacci(n-1) + fibonacci(n-2);
}

void recursive(int n){
    for(int i=0; i<n; i++){
        cout << fibonacci(i);
    }
}

void iterative(int n){
    int a1 =0;
    int a2 =1;
    cout<<a1<<" "<<a2<<" ";

    for(int i= 2; i<n; i++){
        int a3 = a1 + a2;
        a1 = a2;
        a2 = a3;
        cout<<a2<<" ";
    }
    cout<<endl;
}

int main(){
    int n;
    cout<<"Enter the number of terms"<<endl;
    cin>>n;
    auto start_time = high_resolution_clock::now();
    recursive(n);
    auto end_time = high_resolution_clock::now();
    cout<<endl;
    iterative(n);
    
    auto duration = duration_cast<microseconds>(end_time - start_time);
    cout<<"Time taken : "<<duration.count();
    return 0;
}


2 ->
#include <bits/stdc++.h>
using namespace std;

class Node {
public:
    char data;
    int freq;
    Node *left;
    Node *right;

    Node(char a, int b) {
        data = a;
        freq = b;
        left = nullptr;
        right = nullptr;
    }
};

class Compare {
public:
    bool operator()(Node *a, Node *b) {
        return a->freq > b->freq;
    }
};

void print(Node *root, string code = "") {
    if (!root) return;
    // Leaf node
    if (!root->left && !root->right) {
        cout << root->data << " " << code << endl;
    }
    print(root->left, code + "0");
    print(root->right, code + "1");
}

void huff(vector<char> &data, vector<int> &freq) {
    priority_queue<Node *, vector<Node *>, Compare> pq;
    // Create leaf node for each char and push to pq
    for (size_t i = 0; i < data.size(); i++) {
        pq.push(new Node(data[i], freq[i]));
    }
    while (pq.size() > 1) {
        Node *left = pq.top();
        pq.pop();
        Node *right = pq.top();
        pq.pop();
        Node *newNode = new Node('$', left->freq + right->freq);
        newNode->left = left;
        newNode->right = right;
        pq.push(newNode);
    }
    print(pq.top());
}

int main() {
    int n;
    cout << "Enter the number of characters: ";
    cin >> n;

    vector<char> data(n);
    vector<int> freq(n);

    cout << "Enter the characters:\n";
    for (int i = 0; i < n; i++) {
        cin >> data[i];
    }

    cout << "Enter the corresponding frequencies:\n";
    for (int i = 0; i < n; i++) {
        cin >> freq[i];
    }

    huff(data, freq);
    return 0;
}


3 ->
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Function to solve the 0-1 Knapsack problem using Dynamic Programming
int knapsack(int W, vector<int> &weights, vector<int> &values, int n) {
    // Create a 2D DP table to store the maximum value at each weight limit
    vector<vector<int>> dp(n + 1, vector<int>(W + 1, 0));

    // Build the table dp[][] in bottom-up manner
    for (int i = 1; i <= n; i++) {
        for (int w = 1; w <= W; w++) {
            if (weights[i - 1] <= w) {
                // Maximize the value by either including or excluding the current item
                dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]);
            } else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }

    // The bottom-right corner of the table contains the maximum value that can be obtained
    return dp[n][W];
}

int main() {
    int n, W;
    
    // Input number of items and knapsack capacity
    cout << "Enter the number of items: ";
    cin >> n;
    cout << "Enter the capacity of the knapsack: ";
    cin >> W;

    vector<int> weights(n), values(n);
    
    // Input the weights and values of the items
    cout << "Enter the weights of the items:\n";
    for (int i = 0; i < n; i++) {
        cin >> weights[i];
    }
    
    cout << "Enter the values of the items:\n";
    for (int i = 0; i < n; i++) {
        cin >> values[i];
    }
    
    // Call the knapsack function and output the result
    int max_value = knapsack(W, weights, values, n);
    cout << "The maximum value that can be obtained is: " << max_value << endl;

    return 0;
}

